// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: project_profile/project_profile.proto

package projectprofilepb

import (
	commonpb "/commonpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProjectProfileService_CreateProjectProfile_FullMethodName = "/project_profile.project_profile.ProjectProfileService/CreateProjectProfile"
)

// ProjectProfileServiceClient is the client API for ProjectProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectProfileServiceClient interface {
	CreateProjectProfile(ctx context.Context, in *CreateProjectProfileRequest, opts ...grpc.CallOption) (*commonpb.HttpResponse, error)
}

type projectProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectProfileServiceClient(cc grpc.ClientConnInterface) ProjectProfileServiceClient {
	return &projectProfileServiceClient{cc}
}

func (c *projectProfileServiceClient) CreateProjectProfile(ctx context.Context, in *CreateProjectProfileRequest, opts ...grpc.CallOption) (*commonpb.HttpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.HttpResponse)
	err := c.cc.Invoke(ctx, ProjectProfileService_CreateProjectProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectProfileServiceServer is the server API for ProjectProfileService service.
// All implementations must embed UnimplementedProjectProfileServiceServer
// for forward compatibility.
type ProjectProfileServiceServer interface {
	CreateProjectProfile(context.Context, *CreateProjectProfileRequest) (*commonpb.HttpResponse, error)
	mustEmbedUnimplementedProjectProfileServiceServer()
}

// UnimplementedProjectProfileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProjectProfileServiceServer struct{}

func (UnimplementedProjectProfileServiceServer) CreateProjectProfile(context.Context, *CreateProjectProfileRequest) (*commonpb.HttpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectProfile not implemented")
}
func (UnimplementedProjectProfileServiceServer) mustEmbedUnimplementedProjectProfileServiceServer() {}
func (UnimplementedProjectProfileServiceServer) testEmbeddedByValue()                               {}

// UnsafeProjectProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectProfileServiceServer will
// result in compilation errors.
type UnsafeProjectProfileServiceServer interface {
	mustEmbedUnimplementedProjectProfileServiceServer()
}

func RegisterProjectProfileServiceServer(s grpc.ServiceRegistrar, srv ProjectProfileServiceServer) {
	// If the following call pancis, it indicates UnimplementedProjectProfileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProjectProfileService_ServiceDesc, srv)
}

func _ProjectProfileService_CreateProjectProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectProfileServiceServer).CreateProjectProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectProfileService_CreateProjectProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectProfileServiceServer).CreateProjectProfile(ctx, req.(*CreateProjectProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectProfileService_ServiceDesc is the grpc.ServiceDesc for ProjectProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project_profile.project_profile.ProjectProfileService",
	HandlerType: (*ProjectProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectProfile",
			Handler:    _ProjectProfileService_CreateProjectProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project_profile/project_profile.proto",
}
