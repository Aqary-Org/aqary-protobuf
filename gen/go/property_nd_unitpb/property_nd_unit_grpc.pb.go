// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: property_nd_unit/property_nd_unit.proto

package property_nd_unitpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PropertyAndUnitService_CreatePropertyAndUnit_FullMethodName = "/property_nd_unit.PropertyAndUnitService/CreatePropertyAndUnit"
	PropertyAndUnitService_GetAllPropertyAndUnit_FullMethodName = "/property_nd_unit.PropertyAndUnitService/GetAllPropertyAndUnit"
)

// PropertyAndUnitServiceClient is the client API for PropertyAndUnitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropertyAndUnitServiceClient interface {
	CreatePropertyAndUnit(ctx context.Context, in *CreatePropertyAndUnitRequest, opts ...grpc.CallOption) (*CreatePropertyAndUnitResponse, error)
	GetAllPropertyAndUnit(ctx context.Context, in *GetAllPropertyAndUnitRequest, opts ...grpc.CallOption) (*GetAllPropertyAndUnitResponse, error)
}

type propertyAndUnitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPropertyAndUnitServiceClient(cc grpc.ClientConnInterface) PropertyAndUnitServiceClient {
	return &propertyAndUnitServiceClient{cc}
}

func (c *propertyAndUnitServiceClient) CreatePropertyAndUnit(ctx context.Context, in *CreatePropertyAndUnitRequest, opts ...grpc.CallOption) (*CreatePropertyAndUnitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePropertyAndUnitResponse)
	err := c.cc.Invoke(ctx, PropertyAndUnitService_CreatePropertyAndUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyAndUnitServiceClient) GetAllPropertyAndUnit(ctx context.Context, in *GetAllPropertyAndUnitRequest, opts ...grpc.CallOption) (*GetAllPropertyAndUnitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPropertyAndUnitResponse)
	err := c.cc.Invoke(ctx, PropertyAndUnitService_GetAllPropertyAndUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropertyAndUnitServiceServer is the server API for PropertyAndUnitService service.
// All implementations must embed UnimplementedPropertyAndUnitServiceServer
// for forward compatibility.
type PropertyAndUnitServiceServer interface {
	CreatePropertyAndUnit(context.Context, *CreatePropertyAndUnitRequest) (*CreatePropertyAndUnitResponse, error)
	GetAllPropertyAndUnit(context.Context, *GetAllPropertyAndUnitRequest) (*GetAllPropertyAndUnitResponse, error)
	mustEmbedUnimplementedPropertyAndUnitServiceServer()
}

// UnimplementedPropertyAndUnitServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPropertyAndUnitServiceServer struct{}

func (UnimplementedPropertyAndUnitServiceServer) CreatePropertyAndUnit(context.Context, *CreatePropertyAndUnitRequest) (*CreatePropertyAndUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePropertyAndUnit not implemented")
}
func (UnimplementedPropertyAndUnitServiceServer) GetAllPropertyAndUnit(context.Context, *GetAllPropertyAndUnitRequest) (*GetAllPropertyAndUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPropertyAndUnit not implemented")
}
func (UnimplementedPropertyAndUnitServiceServer) mustEmbedUnimplementedPropertyAndUnitServiceServer() {
}
func (UnimplementedPropertyAndUnitServiceServer) testEmbeddedByValue() {}

// UnsafePropertyAndUnitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropertyAndUnitServiceServer will
// result in compilation errors.
type UnsafePropertyAndUnitServiceServer interface {
	mustEmbedUnimplementedPropertyAndUnitServiceServer()
}

func RegisterPropertyAndUnitServiceServer(s grpc.ServiceRegistrar, srv PropertyAndUnitServiceServer) {
	// If the following call pancis, it indicates UnimplementedPropertyAndUnitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PropertyAndUnitService_ServiceDesc, srv)
}

func _PropertyAndUnitService_CreatePropertyAndUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePropertyAndUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyAndUnitServiceServer).CreatePropertyAndUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyAndUnitService_CreatePropertyAndUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyAndUnitServiceServer).CreatePropertyAndUnit(ctx, req.(*CreatePropertyAndUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyAndUnitService_GetAllPropertyAndUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPropertyAndUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyAndUnitServiceServer).GetAllPropertyAndUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyAndUnitService_GetAllPropertyAndUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyAndUnitServiceServer).GetAllPropertyAndUnit(ctx, req.(*GetAllPropertyAndUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PropertyAndUnitService_ServiceDesc is the grpc.ServiceDesc for PropertyAndUnitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PropertyAndUnitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "property_nd_unit.PropertyAndUnitService",
	HandlerType: (*PropertyAndUnitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePropertyAndUnit",
			Handler:    _PropertyAndUnitService_CreatePropertyAndUnit_Handler,
		},
		{
			MethodName: "GetAllPropertyAndUnit",
			Handler:    _PropertyAndUnitService_GetAllPropertyAndUnit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "property_nd_unit/property_nd_unit.proto",
}
